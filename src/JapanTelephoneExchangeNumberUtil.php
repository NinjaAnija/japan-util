<?php

/*
 * This file is part of JapanUtil.
 *
 * (c) Takashi OGAWA
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace NinjaAnija\JapanUtil;

/**
 * 日本語文字列を扱うためのユーティリティ.
 *
 * @author Takashi OGAWA
 *
 */
class JapanTelephoneExchangeNumberUtil
{
    private static $telephoneExchangeNumberPrefectureCodeMap = [
        9969 => [46],
        9913 => [46],
        9912 => [46],
        9802 => [47],
        9496 => [40],
        8514 => [32],
        8512 => [32],
        8477 => [34],
        8396 => [35],
        8388 => [35],
        8387 => [35],
        7468 => [29],
        5979 => [24],
        5769 => [21],
        4998 => [13],
        4996 => [13],
        4994 => [13],
        4992 => [13],
        1658 => [1],
        1656 => [1],
        1655 => [1],
        1654 => [1],
        1648 => [1],
        1635 => [1],
        1634 => [1],
        1632 => [1],
        1587 => [1],
        1586 => [1],
        1564 => [1],
        1558 => [1],
        1547 => [1],
        1466 => [1],
        1457 => [1],
        1456 => [1],
        1398 => [1],
        1397 => [1],
        1392 => [1],
        1377 => [1],
        1374 => [1],
        1372 => [1],
        1267 => [1],
        997 => [46],
        996 => [46],
        995 => [46],
        994 => [46],
        993 => [46],
        987 => [45],
        986 => [46, 45],
        985 => [45],
        984 => [45],
        983 => [45],
        982 => [45],
        980 => [47],
        979 => [44, 40],
        978 => [44],
        977 => [44],
        974 => [44],
        973 => [44],
        972 => [44],
        969 => [43],
        968 => [43],
        967 => [43],
        966 => [43],
        965 => [43],
        964 => [43],
        959 => [42],
        957 => [42],
        956 => [42],
        955 => [41, 42],
        954 => [41],
        952 => [41],
        950 => [42],
        949 => [40],
        948 => [40],
        947 => [40],
        946 => [40],
        944 => [43, 40],
        943 => [40],
        942 => [41, 40],
        940 => [40],
        930 => [40],
        920 => [42],
        898 => [38],
        897 => [38],
        896 => [38, 37],
        895 => [38],
        894 => [38],
        893 => [38],
        892 => [38],
        889 => [39],
        887 => [39],
        885 => [36],
        884 => [36],
        883 => [36],
        880 => [39],
        879 => [37],
        877 => [37],
        875 => [37],
        869 => [33],
        868 => [33],
        867 => [33],
        866 => [33],
        865 => [33],
        863 => [33],
        859 => [31],
        858 => [31],
        857 => [31],
        856 => [32],
        855 => [32],
        854 => [32],
        853 => [32],
        852 => [32],
        848 => [34],
        847 => [34],
        846 => [34],
        845 => [34],
        838 => [35],
        837 => [35],
        836 => [35],
        835 => [35],
        834 => [35],
        833 => [35],
        829 => [34],
        827 => [34, 35],
        826 => [34],
        824 => [34],
        823 => [34],
        820 => [35],
        799 => [28],
        798 => [28],
        797 => [28],
        796 => [28],
        795 => [28],
        794 => [28],
        791 => [28],
        790 => [28],
        779 => [18],
        778 => [18],
        776 => [18],
        774 => [26],
        773 => [26],
        772 => [26],
        771 => [26],
        770 => [18],
        768 => [17],
        767 => [17],
        766 => [16],
        765 => [16],
        763 => [16],
        761 => [17],
        749 => [25],
        748 => [25],
        747 => [29],
        746 => [29],
        745 => [29],
        744 => [29],
        743 => [27, 26, 29],
        742 => [29],
        740 => [25],
        739 => [30],
        738 => [30],
        737 => [30],
        736 => [30],
        735 => [24, 30],
        725 => [27],
        721 => [27],
        599 => [24],
        598 => [24],
        597 => [24],
        596 => [24],
        595 => [24],
        594 => [24],
        587 => [23],
        586 => [23, 21],
        585 => [21],
        584 => [21],
        581 => [21],
        578 => [21],
        577 => [21],
        576 => [21],
        575 => [21],
        574 => [21],
        573 => [21, 20],
        572 => [21],
        569 => [23],
        568 => [23],
        567 => [23, 24],
        566 => [23],
        565 => [23],
        564 => [23],
        563 => [23],
        562 => [23],
        561 => [23],
        558 => [22],
        557 => [22],
        556 => [19],
        555 => [19],
        554 => [19],
        553 => [19],
        551 => [19],
        550 => [22],
        548 => [22],
        547 => [22],
        545 => [22],
        544 => [22],
        539 => [22],
        538 => [22],
        537 => [22],
        536 => [23],
        533 => [23],
        532 => [23],
        531 => [23],
        495 => [11],
        494 => [11],
        493 => [11],
        480 => [11],
        479 => [8, 12],
        478 => [12],
        476 => [12],
        475 => [12],
        470 => [12],
        467 => [14],
        466 => [14],
        465 => [14, 22],
        463 => [14],
        460 => [14, 22],
        439 => [12],
        438 => [12],
        436 => [12],
        428 => [13, 19],
        422 => [13],
        299 => [8],
        297 => [8],
        296 => [8, 9],
        295 => [8],
        294 => [8],
        293 => [8],
        291 => [8],
        289 => [9],
        288 => [9],
        287 => [9],
        285 => [9],
        284 => [10, 9],
        283 => [9],
        282 => [9],
        280 => [8, 11, 9],
        279 => [10],
        278 => [10],
        277 => [10],
        276 => [10, 11],
        274 => [10, 11],
        270 => [10],
        269 => [20],
        268 => [20],
        267 => [20],
        266 => [20],
        265 => [20],
        264 => [20],
        263 => [20],
        261 => [20],
        260 => [20],
        259 => [15],
        258 => [15],
        257 => [15],
        256 => [15],
        255 => [15],
        254 => [15],
        250 => [15],
        248 => [7],
        247 => [7],
        246 => [7],
        244 => [7],
        243 => [7],
        242 => [7],
        241 => [7],
        240 => [7],
        238 => [6],
        237 => [6],
        235 => [6],
        234 => [6],
        233 => [6],
        229 => [4],
        228 => [4],
        226 => [4],
        225 => [4],
        224 => [4],
        223 => [4],
        220 => [4],
        198 => [3],
        197 => [3],
        195 => [3],
        194 => [3],
        193 => [3],
        192 => [3],
        191 => [3],
        187 => [5],
        186 => [5],
        185 => [5],
        184 => [5],
        183 => [5],
        182 => [5],
        179 => [2],
        178 => [2],
        176 => [2],
        175 => [2],
        174 => [2],
        173 => [2],
        172 => [2],
        167 => [1],
        166 => [1],
        165 => [1],
        164 => [1],
        163 => [1],
        162 => [1],
        158 => [1],
        157 => [1],
        156 => [1],
        155 => [1],
        154 => [1],
        153 => [1],
        152 => [1],
        146 => [1],
        145 => [1],
        144 => [1],
        143 => [1],
        142 => [1],
        139 => [1],
        138 => [1],
        137 => [1],
        136 => [1],
        135 => [1],
        134 => [1],
        133 => [1],
        126 => [1],
        125 => [1],
        124 => [1],
        123 => [1],
        99 => [46],
        98 => [47],
        97 => [44],
        96 => [43],
        95 => [42],
        93 => [40],
        92 => [40],
        89 => [38],
        88 => [36, 39],
        87 => [37],
        86 => [33],
        84 => [34],
        83 => [35],
        82 => [34],
        79 => [28],
        78 => [28],
        77 => [26, 25],
        76 => [17, 16],
        75 => [27, 26],
        73 => [30],
        72 => [27, 28],
        59 => [24],
        58 => [21],
        55 => [19, 22],
        54 => [22],
        53 => [22],
        52 => [23],
        49 => [11],
        48 => [11],
        47 => [12],
        46 => [14],
        45 => [14],
        44 => [14, 13],
        43 => [12],
        42 => [13, 11, 14],
        29 => [8],
        28 => [9],
        27 => [10],
        26 => [20],
        25 => [15],
        24 => [7],
        23 => [6],
        22 => [4],
        19 => [3],
        18 => [5],
        17 => [2],
        15 => [1],
        11 => [1],
        6 => [27, 28],
        4 => [11, 12],
        3 => [13],
    ];

    public static function telephoneNumberToPrefectureCode($tel)
    {
        $tel = JapanStringUtil::standardize($tel);
        $tel = implode(explode('-', $tel));

        $needle = @substr($tel, 1, 4);

        if (isset(self::$telephoneExchangeNumberPrefectureCodeMap[$needle])) {
            return self::$telephoneExchangeNumberPrefectureCodeMap[$needle][0];
        }

        $needle = @substr($tel, 1, 3);

        if (isset(self::$telephoneExchangeNumberPrefectureCodeMap[$needle])) {
            return self::$telephoneExchangeNumberPrefectureCodeMap[$needle][0];
        }

        $needle = @substr($tel, 1, 2);

        if (isset(self::$telephoneExchangeNumberPrefectureCodeMap[$needle])) {
            return self::$telephoneExchangeNumberPrefectureCodeMap[$needle][0];
        }

        $needle = @substr($tel, 1, 1);

        if (isset(self::$telephoneExchangeNumberPrefectureCodeMap[$needle])) {
            return self::$telephoneExchangeNumberPrefectureCodeMap[$needle][0];
        }

        return null;
    }

    public static function telephoneNumberToPrefectureCodeStrict($tel)
    {
        $tel = JapanStringUtil::standardize($tel);
        $tel = implode(explode('-', $tel));

        $needle = @substr($tel, 1, 4);

        if (isset(self::$telephoneExchangeNumberPrefectureCodeMap[$needle])) {
            $result = self::$telephoneExchangeNumberPrefectureCodeMap[$needle];
            return count($result) > 1 ? null : $result[0];
        }

        $needle = @substr($tel, 1, 3);

        if (isset(self::$telephoneExchangeNumberPrefectureCodeMap[$needle])) {
            $result = self::$telephoneExchangeNumberPrefectureCodeMap[$needle];
            return count($result) > 1 ? null : $result[0];
        }

        $needle = @substr($tel, 1, 2);

        if (isset(self::$telephoneExchangeNumberPrefectureCodeMap[$needle])) {
            $result = self::$telephoneExchangeNumberPrefectureCodeMap[$needle];
            return count($result) > 1 ? null : $result[0];
        }

        $needle = @substr($tel, 1, 1);

        if (isset(self::$telephoneExchangeNumberPrefectureCodeMap[$needle])) {
            $result = self::$telephoneExchangeNumberPrefectureCodeMap[$needle];
            return count($result) > 1 ? null : $result[0];
        }

        return null;
    }
}
